{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bienvenidos a la Documentaci\u00f3n de MkDocs","text":"<p>En esta documentaci\u00f3n podremos ver las \u00faltimas pr\u00e1cticas que hemos realizado en este trimestre .</p>"},{"location":"#lista-de-practicas","title":"Lista de Pr\u00e1cticas","text":"<ol> <li>Practica IAW 3.1: Implantaci\u00f3n de Moodle en Amazon Web Services (AWS) mediante Ansible</li> <li>Practica IAW 3.2: Implantaci\u00f3n de Wordpress en Amazon Web Services (AWS) mediante Ansible.</li> <li>Practica IAW 4.1: Implantaci\u00f3n de Wordpress en AWS utilizando una arquitectura de tres niveles con AWS SDK para Python</li> <li>Practica IAW 4.3: Implantaci\u00f3n de Wordpress en AWS utilizando una arquitectura de tres niveles con AWS CLI</li> <li>Practica IAW 4.5: Implantaci\u00f3n de Wordpress en AWS utilizando Terraform</li> <li>Practica iaw 5.1 HTTPS con Let\u2019s Encrypt, Docker y Docker Compose</li> <li>Practica iaw 5.2: Despliegue de WordPress usando contenedores Docker y Docker Compose</li> <li>Practica iaw 5.2: Despliegue de WordPress usando contenedores Docker y Docker Compose</li> </ol>"},{"location":"#como-empezar","title":"\u00bfC\u00f3mo empezar?","text":"<p>Para comenzar, navega por el men\u00fa lateral y selecciona la pr\u00e1ctica que quieras revisar. Cada pr\u00e1ctica contiene los pasos detallados y ejemplos para que puedas seguirlos f\u00e1cilmente.</p>"},{"location":"3-1/","title":"Practica IAW 3.1","text":""},{"location":"3-1/#implantacion-de-moodle-en-amazon-web-services-aws-mediante-ansible","title":"Implantaci\u00f3n de Moodle en Amazon Web Services (AWS) mediante Ansible","text":"<p>En esta practica vamos a realizar la implantaci\u00f3n de Moodle a traves de una plataforma de computacion en la nube mediante Ansible, en este caso usaremos Amazon Web Services (AWS) como plataforma. Vamos a partir de la base de la <code>Practica 1.8 - Implantaci\u00f3n de Moodle en Amazon Web Services (AWS)</code>.</p>"},{"location":"3-1/#infraestructura-necesaria","title":"Infraestructura necesaria","text":"<p>La infraestructura propuesta consta de dos m\u00e1quinas virtuales, una front-end  formada por un servidor web con Apache HTTP Server y una capa de back-end formada por un servidor MySQL.</p>"},{"location":"3-1/#estructura-de-la-practica","title":"Estructura de la pr\u00e1ctica","text":"<p>La estrutura que va tener esta practiva a ser la siguiente:</p> <pre><code>.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 templates\n\u2502   \u2514\u2500\u2500 000-default.conf\n\u2514\u2500\u2500 inventory\n\u2502   \u2514\u2500\u2500 inventory\n\u2514\u2500\u2500 playbooks\n\u2502   \u251c\u2500\u2500 setup_letsencrypt_https.yml\n\u2502   \u251c\u2500\u2500 install_lamp_backend.yml\n\u2502   \u251c\u2500\u2500 install_lamp_frontend.yml\n\u2502   \u251c\u2500\u2500 deploy_backend.yml\n\u2502   \u2514\u2500\u2500 deploy_frontend.yml\n\u2514\u2500\u2500 vars\n\u2502   \u2514\u2500\u2500 variables.yml\n\u2514\u2500\u2500 main.yml\n</code></pre>"},{"location":"3-1/#contenido-de-los-directorios","title":"Contenido de los directorios","text":"<ul> <li>El directorio templates tendra el archivo de configuracion <code>000-default.conf</code> con el siguiente contenido.</li> </ul> <pre><code>ServerSignature Off\nServerTokens Prod\n\n&lt;VirtualHost *:80&gt;\n        DocumentRoot /var/www/html\n        DirectoryIndex index.php index.html\n\n        ErrorLog ${APACHE_LOG_DIR}/error.log\n        CustomLog ${APACHE_LOG_DIR}/access.log combined\n\n        &lt;Directory \"/var/www/html\"&gt;\n            AllowOverride All\n        &lt;/Directory&gt;\n&lt;/VirtualHost&gt;\n</code></pre> <ul> <li>El directorio inventory tendra el archivo inventory con los datos de los grupos con sus respectivas ips elasticas y las variables con los datos necesarios para poder hacer ssh.</li> </ul> <pre><code>[frontend]\n44.209.220.152\n\n[backend]\n50.17.148.42\n\n[all:vars]\nansible_user=ubuntu\nansible_ssh_private_key_file=/home/ubuntu/practica-iaw-3.1/vockey.pem\nansible_ssh_common_args='-o StrictHostKeyChecking=accept-new'\n</code></pre> <ul> <li> <p>El directorio playbooks consta de cinco ficheros de Ansible con la configuracion necesaria para poder desplegar moodle, estos cinco ficheros son:</p> <ul> <li>install_lamp_frontend.yml</li> <li>install_lamp_backend.yml</li> <li>deploy_backend.yml</li> <li>setup_letsencrypt_https.yml</li> <li>deploy_frontend.yml</li> </ul> </li> <li> <p>Dentro del directorio vars almacenamos el archvivo de variables de <code>Ansible</code>.</p> </li> <li> <p>Dentro del fichero <code>main.yml</code> importamos los playbooks mencionados previamente para poder realizar un despliegue.</p> </li> </ul>"},{"location":"3-1/#contenido-del-install_lamp_frontend","title":"Contenido del install_lamp_frontend","text":"<p>Actualizamos la lista de paquetes para asegurarnos de que los paquetes disponibles est\u00e9n actualizados.</p> <pre><code>    - name: Actualizar lista de paquetes\n      apt:\n        update_cache: yes\n</code></pre> <p>Actualizamos los paquetes instalados para mantener el sistema al d\u00eda y eliminar paquetes innecesarios.</p> <pre><code>    - name: Actualizar paquetes\n      apt:\n        upgrade: dist\n        autoremove: yes\n</code></pre> <p>Instalamos Apache.</p> <pre><code>    - name: Instalar Apache\n      apt:\n        name: apache2\n        state: present\n</code></pre> <p>Habilitamos el m\u00f3dulo rewrite en Apache para permitir la reescritura de URLs.</p> <pre><code>    - name: Habilitar m\u00f3dulo rewrite en Apache\n      command: a2enmod rewrite\n      notify: Reiniciar Apache\n</code></pre> <p>Copiamos el archivo de configuraci\u00f3n de Apache desde una plantilla predefinida.</p> <pre><code>    - name: Copiar archivo de configuraci\u00f3n de Apache\n      copy:\n        src: /home/ubuntu/practica-iaw-3.1/moodle/templates/000-default.conf\n        dest: /etc/apache2/sites-available/000-default.conf\n        owner: root\n        group: root\n        mode: '0644'\n      notify: Reiniciar Apache\n</code></pre> <p>Instalamos PHP y los m\u00f3dulos requeridos para permitir la ejecuci\u00f3n de aplicaciones PHP.</p> <pre><code>    - name: Instalar PHP y m\u00f3dulos requeridos\n      apt:\n        name:\n          - php\n          - libapache2-mod-php\n          - php-mysql\n          - php-xml\n          - php-mbstring\n          - php-curl\n          - php-zip\n          - php-gd\n          - php-intl\n          - php-soap\n          - php-mysqli\n        state: present\n</code></pre> <p>Reiniciamos de Apache para aplicar los cambios de configuraci\u00f3n.</p> <pre><code>    - name: Reiniciar Apache\n      systemd:\n        name: apache2\n        state: restarted\n</code></pre> <p>Eliminamos instalaciones previas de Moodle para evitar conflictos con configuraciones anteriores.</p> <pre><code>    - name: Eliminar instalaciones previas de Moodle\n      file:\n        path: /var/www/moodledata\n        state: absent\n</code></pre> <p>Creamos el directorio moodledata con los permisos adecuados para Moodle.</p> <pre><code>    - name: Crear directorio moodledata\n      file:\n        path: /var/www/moodledata\n        state: directory\n        owner: www-data\n        group: www-data\n        mode: '0755'\n</code></pre> <p>Modificamos permisos y propietario del directorio web para garantizar el correcto acceso a los archivos.</p> <pre><code>    - name: Modificar propietario y grupo de /var/www/html\n      file:\n        path: /var/www/html\n        state: directory\n        owner: www-data\n        group: www-data\n        recurse: yes\n</code></pre>"},{"location":"3-1/#contenido-del-install_lamp_backend","title":"Contenido del install_lamp_backend","text":"<p>Instalamos el m\u00f3dulo pymysqlste que permite que Ansible gestione bases de datos MySQL de manera program\u00e1tica.</p> <pre><code>    - name: Instalamos el m\u00f3dulo de pymysql\n      apt:\n        name: python3-pymysql\n        state: present\n</code></pre> <p>Se actualiza la lista de paquetes disponibles en el repositorio.</p> <pre><code>    - name: Actualizar lista de paquetes\n      apt:\n        update_cache: yes\n</code></pre> <p>Se actualizan los paquetes existentes y se eliminan los que ya no son necesarios.</p> <pre><code>    - name: Actualizar paquetes\n      apt:\n        upgrade: dist\n        autoremove: yes\n</code></pre> <p>Se instala MySQL Server en el servidor remoto.</p> <pre><code>    - name: Instalar MySQL Server\n      apt:\n        name: mysql-server\n        state: present\n</code></pre> <p>Se edita el archivo de configuraci\u00f3n de MySQL para permitir conexiones desde cualquier direcci\u00f3n IP, en lugar de restringirlas a 127.0.0.1.</p> <pre><code>    - name: Configurar MySQL para aceptar conexiones remotas\n      replace:\n        path: /etc/mysql/mysql.conf.d/mysqld.cnf\n        regexp: '127.0.0.1'\n        replace: '0.0.0.0'\n</code></pre> <p>Se reinicia MySQL para aplicar los cambios realizados en la configuraci\u00f3n.</p> <pre><code>    - name: Reiniciar servicio MySQL\n      systemd:\n        name: mysql\n        state: restarted\n</code></pre>"},{"location":"3-1/#contenido-del-deploy_backend","title":"Contenido del deploy_backend","text":"<p>Si una base de datos con el mismo nombre ya existe, se elimina para garantizar una configuraci\u00f3n limpia.</p> <pre><code>    - name: Eliminar base de datos existente si existe\n      mysql_db:\n        name: \"{{ db.name }}\"\n        state: absent\n        login_unix_socket: /var/run/mysqld/mysqld.sock\n</code></pre> <p>Se crea una nueva base de datos con el nombre especificado en variables.yml.</p> <pre><code>    - name: Crear nueva base de datos para Moodle\n      mysql_db:\n        name: \"{{ db.name }}\"\n        state: present\n        login_unix_socket: /var/run/mysqld/mysqld.sock \n</code></pre> <p>Si el usuario de la base de datos ya existe, se elimina antes de crearlo nuevamente.</p> <pre><code>    - name: Eliminar usuario de base de datos si existe\n      mysql_user:\n        name: \"{{ db.user }}\"\n        host: \"{{ frontend_private_ip }}\"\n        state: absent\n        login_unix_socket: /var/run/mysqld/mysqld.sock \n</code></pre> <p>Se crea un nuevo usuario para la base de datos de Moodle, con acceso desde cualquier direcci\u00f3n IP y con todos los privilegios sobre la base de datos.</p> <pre><code>    - name: Crear usuario de base de datos para Moodle\n      mysql_user:\n        name: \"{{ db.user }}\"\n        password: \"{{ db.password }}\"\n        host: \"%\"\n        priv: \"{{ db.name }}.*:ALL\"\n        state: present\n        login_unix_socket: /var/run/mysqld/mysqld.sock \n</code></pre>"},{"location":"3-1/#contenido-del-setup_letsencrypt_https","title":"Contenido del setup_letsencrypt_https","text":"<p>Si Certbot fue instalado anteriormente con apt, esta tarea lo elimina para evitar conflictos con la versi\u00f3n instalada mediante snap.</p> <pre><code>    - name: Desinstalar instalaciones previas de Certbot\n      apt:\n        name: certbot\n        state: absent\n</code></pre> <p>Se instala Certbot utilizando Snap, asegurando que se obtiene la versi\u00f3n m\u00e1s reciente y compatible con Let's Encrypt.</p> <pre><code>    - name: Instalar Certbot con snap\n      snap:\n        name: certbot\n        classic: yes\n        state: present\n</code></pre> <p>Se solicita y configura el certificado SSL/TLS.</p> <pre><code>    - name: Solicitar y configurar certificado SSL/TLS a Let's Encrypt con certbot\n      command:\n        certbot --apache \\\n        -m {{ certbot.email }} \\\n        --agree-tos \\\n        --no-eff-email \\\n        --non-interactive \\\n        -d {{ certbot.domain }}\n</code></pre>"},{"location":"3-1/#contenido-del-deploy_frontend","title":"Contenido del deploy_frontend","text":"<p>Se elimina cualquier versi\u00f3n previa del archivo de instalaci\u00f3n de Moodle en <code>/tmp</code>.</p> <pre><code>    - name: Eliminar instalaciones previas\n      file:\n        path: /tmp/moodle-latest-405.tgz*\n        state: absent\n</code></pre> <p>Se descarga la \u00faltima versi\u00f3n estable de Moodle desde su sitio oficial.</p> <pre><code>    - name: Descargar c\u00f3digo fuente de Moodle\n      get_url:\n        url: https://download.moodle.org/download.php/direct/stable405/moodle-latest-405.tgz\n        dest: /tmp/moodle-latest-405.tgz\n</code></pre> <p>Se extrae los archivos de Moodle en el directorio temporal <code>/tmp</code>.</p> <pre><code>    - name: Descomprimir c\u00f3digo fuente de Moodle\n      unarchive:\n        src: /tmp/moodle-latest-405.tgz\n        dest: /tmp\n        remote_src: yes\n</code></pre> <p>Se elimina cualquier instalaci\u00f3n anterior de Moodle en el directorio web.</p> <pre><code>    - name: Eliminar contenido previo en /var/www/html\n      file:\n        path: /var/www/html\n        state: absent\n</code></pre> <p>Movemos los archivos de Moodle al directorio <code>/var/www/html</code>.</p> <pre><code>    - name: Copiar archivos de Moodle a /var/www/html\n      copy:\n        src: /tmp/moodle/\n        dest: /var/www/html/\n        remote_src: yes\n</code></pre> <p>Borramos los archivos extra\u00eddos en <code>/tmp</code> para liberar espacio.</p> <pre><code>    - name: Eliminar archivos originales de Moodle\n      file:\n        path: /tmp/moodle/\n        state: absent\n</code></pre> <p>Modificamos la configuraci\u00f3n de PHP para aumentar el l\u00edmite de <code>max_input_vars</code> requerido por Moodle.</p> <pre><code>    - name: Configurar PHP max_input_vars\n      replace:\n        path: \"{{ item }}\"\n        regexp: ';max_input_vars = 1000'\n        replace: 'max_input_vars = 5000'\n      loop: \"{{ php_config_files }}\"\n</code></pre> <p>Aseguramos que el servidor web tiene los permisos adecuados sobre los archivos de Moodle.</p> <pre><code>    - name: Configurar permisos y propietarios\n      file:\n        path: \"{{ item.path }}\"\n        owner: www-data\n        group: www-data\n        mode: \"{{ item.mode }}\"\n        recurse: yes\n      loop: \"{{ moodle_permisos }}\"\n</code></pre> <p>Ejecutamos el script de instalaci\u00f3n de Moodle con los par\u00e1metros definidos en el archivo de variables.</p> <pre><code>    - name: Instalar Moodle\n      command: &gt;\n        sudo -u www-data /usr/bin/php /var/www/html/admin/cli/install.php --lang={{ moodle.idioma }} --wwwroot={{ moodle.url }} --dataroot={{ moodle.directorydata }} --dbtype={{ moodle.tipobd }} --dbhost={{ moodle.host }} --dbname={{ moodle.name }} --dbuser={{ moodle.user }} --dbpass={{ moodle.pass }} --prefix={{ moodle.prefijo }} --fullname=\"{{ moodle.fullname }}\" --shortname={{ moodle.shortname }} --summary=\"{{ moodle.summary }}\" --adminuser={{ moodle.admin }} --adminpass={{ moodle.adminpass }} --adminemail={{ moodle.adminemail }} --agree-license --non-interactive\n</code></pre> <p>Reiniciamos Apache para aplicar los cambios en la configuraci\u00f3n.</p> <pre><code>    - name: Reiniciar Apache\n      systemd:\n        name: apache2\n        state: restarted\n</code></pre>"},{"location":"3-1/#comprobaciones","title":"Comprobaciones","text":"<p>Comprobaci\u00f3n de que se ejecuta sin ningun problema.</p> <p></p> <p>Comprobaci\u00f3n del funcionamiento de Moodle.</p> <p></p> <p>Comprobaci\u00f3n del estado del MySQL.</p> <p></p> <p>Comprobaci\u00f3n de que la maquina front-end tiene acceso a mysql.</p> <p></p> <p>Comprobaci\u00f3n del certificado SSL/TLS.</p> <p></p>"},{"location":"4-1/","title":"Practica IAW 4.1","text":""},{"location":"4-1/#implantacion-de-wordpress-en-aws-utilizando-una-arquitectura-de-tres-niveles-con-aws-cli","title":"Implantaci\u00f3n de Wordpress en AWS utilizando una arquitectura de tres niveles con AWS CLI","text":"<p>En esta practica vamos a realizar la creacion de la estructura de la <code>Practica 1.11 - Implantaci\u00f3n de Wordpress en AWS utilizando una arquitectura de tres niveles</code> a traves de una plataforma de computacion en la nube mediante AWS CLI.</p>"},{"location":"4-1/#que-es-aws-cli","title":"\u00bfQu\u00e9 es AWS CLI?","text":"<p><code>AWS CLI (Command Line Interface)</code> es una herramienta que se ejecuta desde la l\u00ednea de comandos que permite gestionar todos los servicios de Amazon Web Services.</p> <p><code>AWS CLI</code> proporciona acceso directo a la API p\u00fablica de los servicios de AWS, de forma que todas las funcionalidades que se pueden realizar desde la consola de admnistraci\u00f3n web, tambi\u00e9n se pueden realizar con esta herramienta desde la l\u00ednea de comandos.</p> <p>Esta herramienta nos permite crear scripts de shell para automatizar la creaci\u00f3n y la administraci\u00f3n de los servicios de AWS.</p>"},{"location":"4-1/#infraestructura-necesaria","title":"Infraestructura necesaria","text":"<p>La infraestructura propuesta consta de cinco m\u00e1quinas virtuales, un balanceador de carga, una capa front-end formada por dos servidores web y un servidor NFS y una ultima capa back-end formada por un servidor, cada capa de la infraestrutura tendra su respectivo grupo de seguridad con reglas personalizadas.</p> <p>Necesitaremos crear las siguientes m\u00e1quinas virtuales y reglas:</p> <ul> <li>Balanceador: Acceso por SSH (puerto 22), HTTP (puerto 80) y HTTPS (puerto 443).</li> <li>Frontal Web 1: Acceso por SSH (puerto 22) y NFS (puerto 2049).</li> <li>Frontal Web 2: Acceso por SSH (puerto 22) y NFS (puerto 2049).</li> <li>Servidor NFS: NFS: Acceso por SSH (puerto 22) y NFS (puerto 2049).</li> <li>Servidor de Base de Datos: Acceso por SSH (puerto 22) y MySQL (puerto 3306).</li> </ul>"},{"location":"4-1/#paso-previos-a-la-practica","title":"Paso previos a la pr\u00e1ctica","text":""},{"location":"4-1/#instalacion-de-aws-cli","title":"Instalaci\u00f3n de AWS CLI","text":"<p>Para realizar la instalaci\u00f3n de AWS CLI en un sistema operativo Linux sobre una arquitectura x86 de 64 bits, tenemos que ejecutar los siguientes comandos.</p> <p>Paso 1. Descargamos un archivo <code>.zip</code> con la aplicaci\u00f3n AWS CLI.</p> <pre><code>curl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"awscliv2.zip\"\n</code></pre> <p>Paso 2. Descomprimimos el archivo que acabamos de descargar.</p> <pre><code>unzip awscliv2.zip\n</code></pre> <p>Paso 3. Ejectuamos el script de instalaci\u00f3n.</p> <pre><code>sudo ./aws/install\n</code></pre> <p>Paso 4. Comprobamos que la instalaci\u00f3n se ha realizado de forma correcta.</p> <pre><code>aws --version\n</code></pre>"},{"location":"4-1/#configuracion-de-aws-cli","title":"Configuraci\u00f3n de AWS CLI","text":"<p>Para configurar AWS CLI ejecutaremos el siguiente comando.</p> <pre><code>aws configure\n</code></pre> <p>Este comandos nos preguntar\u00e1 estos datos:</p> <pre><code>AWS Access Key ID [None]: \nAWS Secret Access Key [None]: \nDefault region name [None]: \nDefault output format [None]:\n</code></pre> <p>Y crear\u00e1 un archivo de texto llamado credentials dentro del directorio home del usuario.</p> <ul> <li>En Linux/macOs el archivo estar\u00e1 en la ruta: <code>~/.aws/credentials</code>.</li> <li>En Windows estar\u00e1 en la ruta: <code>C:\\Users\\usuario\\.aws\\credentials</code>.</li> </ul>"},{"location":"4-1/#creacion-y-configuracion-de-grupos-de-seguridad","title":"Creaci\u00f3n y configuracion de grupos de seguridad","text":"<p>Deshabilitamos la paginaci\u00f3n de la salida de los comandos de <code>AWS CLI</code></p> <pre><code>export AWS_PAGER=\"\"\n</code></pre> <p>Importamos las variables de entorno</p> <pre><code>source .env\n</code></pre>"},{"location":"4-1/#creamos-el-grupo-de-seguridad-frontend-sg","title":"Creamos el grupo de seguridad: frontend-sg","text":"<p>Ejecutamos el siguiente comando para crear un nuevo grupo de seguridad.</p> <pre><code>aws ec2 create-security-group \\\n    --group-name $SECURITY_GROUP_FRONTEND \\\n    --description \"Reglas para el frontend\"\n</code></pre> <p>Creamos una regla de accesso SSH</p> <pre><code>aws ec2 authorize-security-group-ingress \\\n    --group-name $SECURITY_GROUP_FRONTEND \\\n    --protocol tcp \\\n    --port 22 \\\n    --cidr 0.0.0.0/0\n</code></pre> <p>Creamos una regla de accesso para NFS</p> <pre><code>aws ec2 authorize-security-group-ingress \\\n    --group-name $SECURITY_GROUP_FRONTEND \\\n    --protocol tcp \\\n    --port 2049 \\\n    --cidr 0.0.0.0/0\n</code></pre>"},{"location":"4-1/#creamos-el-grupo-de-seguridad-backend-sg","title":"Creamos el grupo de seguridad: backend-sg","text":"<p>Ejecutamos el siguiente comando para crear un nuevo grupo de seguridad.</p> <pre><code>aws ec2 create-security-group \\\n    --group-name $SECURITY_GROUP_BACKEND \\\n    --description \"Reglas para el backend\"\n</code></pre> <p>Creamos una regla de accesso SSH</p> <pre><code>aws ec2 authorize-security-group-ingress \\\n    --group-name $SECURITY_GROUP_BACKEND \\\n    --protocol tcp \\\n    --port 22 \\\n    --cidr 0.0.0.0/0\n</code></pre> <p>Creamos una regla de accesso para MySQL</p> <pre><code>aws ec2 authorize-security-group-ingress \\\n    --group-name $SECURITY_GROUP_BACKEND \\\n    --protocol tcp \\\n    --port 3306 \\\n    --cidr 0.0.0.0/0\n</code></pre>"},{"location":"4-1/#creamos-el-grupo-de-seguridad-nfs-sg","title":"Creamos el grupo de seguridad: NFS-sg","text":"<p>Ejecutamos el siguiente comando para crear un nuevo grupo de seguridad.</p> <pre><code>aws ec2 create-security-group \\\n    --group-name $SECURITY_GROUP_NFS \\\n    --description \"Reglas para el backend\"\n</code></pre> <p>Creamos una regla de accesso SSH</p> <pre><code>aws ec2 authorize-security-group-ingress \\\n    --group-name $SECURITY_GROUP_NFS \\\n    --protocol tcp \\\n    --port 22 \\\n    --cidr 0.0.0.0/0\n</code></pre> <p>Creamos una regla de accesso para NFS</p> <pre><code>aws ec2 authorize-security-group-ingress \\\n    --group-name $SECURITY_GROUP_NFS \\\n    --protocol tcp \\\n    --port 2049 \\\n    --cidr 0.0.0.0/0\n</code></pre>"},{"location":"4-1/#creamos-el-grupo-de-seguridad-loadbalancer-sg","title":"Creamos el grupo de seguridad: loadbalancer-sg","text":"<p>Ejecutamos el siguiente comando para crear un nuevo grupo de seguridad.</p> <pre><code>aws ec2 create-security-group \\\n    --group-name $SECURITY_GROUP_LOADBALANCER \\\n    --description \"Reglas para el backend\"\n</code></pre> <p>Creamos una regla de accesso SSH</p> <pre><code>aws ec2 authorize-security-group-ingress \\\n    --group-name $SECURITY_GROUP_LOADBALANCER \\\n    --protocol tcp \\\n    --port 22 \\\n    --cidr 0.0.0.0/0\n</code></pre> <p>Creamos una regla de accesso HTTP</p> <pre><code>aws ec2 authorize-security-group-ingress \\\n    --group-name $SECURITY_GROUP_LOADBALANCER \\\n    --protocol tcp \\\n    --port 80 \\\n    --cidr 0.0.0.0/0\n</code></pre> <p>Creamos una regla de accesso HTTPS</p> <pre><code>aws ec2 authorize-security-group-ingress \\\n    --group-name $SECURITY_GROUP_LOADBALANCER \\\n    --protocol tcp \\\n    --port 443 \\\n    --cidr 0.0.0.0/0\n</code></pre>"},{"location":"4-1/#creacion-y-configuracion-de-las-instancias-de-aws","title":"Creaci\u00f3n y configuracion de las instancias de AWS","text":"<p>Deshabilitamos la paginaci\u00f3n de la salida de los comandos de <code>AWS CLI</code>.</p> <pre><code>export AWS_PAGER=\"\"\n</code></pre> <p>Importamos las variables de entorno</p> <pre><code>source .env\n</code></pre>"},{"location":"4-1/#creamos-una-intancia-ec2-para-el-frontend","title":"Creamos una intancia EC2 para el frontend","text":"<pre><code>aws ec2 run-instances \\\n    --image-id $AMI_ID \\\n    --count $COUNT \\\n    --instance-type $INSTANCE_TYPE \\\n    --key-name $KEY_NAME \\\n    --security-groups $SECURITY_GROUP_FRONTEND \\\n    --tag-specifications \"ResourceType=instance,Tags=[{Key=Name,Value=$INSTANCE_NAME_FRONTEND}]\"\n</code></pre>"},{"location":"4-1/#creamos-una-intancia-ec2-para-el-frontend_2","title":"Creamos una intancia EC2 para el frontend_2","text":"<pre><code>aws ec2 run-instances \\\n    --image-id $AMI_ID \\\n    --count $COUNT \\\n    --instance-type $INSTANCE_TYPE \\\n    --key-name $KEY_NAME \\\n    --security-groups $SECURITY_GROUP_FRONTEND \\\n    --tag-specifications \"ResourceType=instance,Tags=[{Key=Name,Value=$INSTANCE_NAME_FRONTEND_2}]\"\n</code></pre>"},{"location":"4-1/#creamos-una-intancia-ec2-para-el-backend","title":"Creamos una intancia EC2 para el backend","text":"<pre><code>aws ec2 run-instances \\\n    --image-id $AMI_ID \\\n    --count $COUNT \\\n    --instance-type $INSTANCE_TYPE \\\n    --key-name $KEY_NAME \\\n    --security-groups $SECURITY_GROUP_BACKEND \\\n    --tag-specifications \"ResourceType=instance,Tags=[{Key=Name,Value=$INSTANCE_NAME_BACKEND}]\"\n</code></pre>"},{"location":"4-1/#creamos-una-intancia-ec2-para-el-nfs","title":"Creamos una intancia EC2 para el NFS","text":"<pre><code>aws ec2 run-instances \\\n    --image-id $AMI_ID \\\n    --count $COUNT \\\n    --instance-type $INSTANCE_TYPE \\\n    --key-name $KEY_NAME \\\n    --security-groups $SECURITY_GROUP_NFS \\\n    --tag-specifications \"ResourceType=instance,Tags=[{Key=Name,Value=$INSTANCE_NAME_NFS}]\"\n</code></pre>"},{"location":"4-1/#creamos-una-intancia-ec2-para-el-loadbalancer","title":"Creamos una intancia EC2 para el loadbalancer","text":"<pre><code>aws ec2 run-instances \\\n    --image-id $AMI_ID \\\n    --count $COUNT \\\n    --instance-type $INSTANCE_TYPE \\\n    --key-name $KEY_NAME \\\n    --security-groups $SECURITY_GROUP_LOADBALANCER \\\n    --tag-specifications \"ResourceType=instance,Tags=[{Key=Name,Value=$INSTANCE_NAME_LOADBALANCER}]\"\n</code></pre>"},{"location":"4-1/#comprobaciones-del-funcionamiento","title":"Comprobaciones del funcionamiento","text":"<p>Comprobamos que se ejecuta correctamente el script de creacion de grupos de seguridad.</p> <p></p> <p>Comprobamos que se han creado correctamento los grupos en AWS.</p> <p></p> <p>Comprobamos que se ejecuta correctamente el script de creacion instancias.</p> <p></p> <p>Comprobamos que se han creado correctamento las instancias en AWS.</p> <p></p>"},{"location":"4-3/","title":"Practica IAW 4.3","text":""},{"location":"4-3/#implantacion-de-wordpress-en-aws-utilizando-una-arquitectura-de-tres-niveles-con-aws-sdk-para-python","title":"Implantaci\u00f3n de Wordpress en AWS utilizando una arquitectura de tres niveles con AWS SDK para Python","text":"<p>En esta practica vamos a realizar la creacion de la estructura de la <code>Practica 1.11 - Implantaci\u00f3n de Wordpress en AWS utilizando una arquitectura de tres niveles</code> a traves de una plataforma de computacion en la nube mediante AWS SDK para Python (Boto3).</p>"},{"location":"4-3/#que-es-boto3","title":"\u00bfQu\u00e9 es Boto3?","text":"<p><code>Boto3</code> es un SDK (Software Development Kit) de <code>Python</code> desarrollado por y para Amazon Web Services (AWS). Este SDK permite a los desarrolladores interactuar con los servicios de AWS para crear y gestionar recursos como grupos de seguridad o instancias EC2, a trav\u00e9s de aplicaciones escritas en <code>Python</code>.</p>"},{"location":"4-3/#infraestructura-necesaria","title":"Infraestructura necesaria","text":"<p>La infraestructura propuesta consta de cinco m\u00e1quinas virtuales, un balanceador de carga, una capa front-end formada por dos servidores web y un servidor NFS y una ultima capa back-end formada por un servidor, cada capa de la infraestrutura tendra su respectivo grupo de seguridad con reglas personalizadas.</p> <p>Necesitaremos crear las siguientes m\u00e1quinas virtuales y reglas:</p> <ul> <li>Balanceador: Acceso por SSH (puerto 22), HTTP (puerto 80) y HTTPS (puerto 443).</li> <li>Frontal Web 1: Acceso por SSH (puerto 22) y NFS (puerto 2049).</li> <li>Frontal Web 2: Acceso por SSH (puerto 22) y NFS (puerto 2049).</li> <li>Servidor NFS: NFS: Acceso por SSH (puerto 22) y NFS (puerto 2049).</li> <li>Servidor de Base de Datos: Acceso por SSH (puerto 22) y MySQL (puerto 3306).</li> </ul>"},{"location":"4-3/#paso-previos-a-la-practica","title":"Paso previos a la pr\u00e1ctica","text":""},{"location":"4-3/#creacion-de-un-entorno-virtual-para-instalar-boto3","title":"Creaci\u00f3n de un entorno virtual para instalar Boto3","text":"<p>Creamos un entorno virtual.</p> <pre><code>python3 -m venv .venv\n</code></pre> <p>Activamos el entorno virtual.</p> <pre><code>. .venv/bin/activate\n</code></pre> <p>Instalamos el paquete <code>boto3</code>.</p> <pre><code>python3 -m pip install boto3\n</code></pre>"},{"location":"4-3/#instalacion-de-aws-cli","title":"Instalaci\u00f3n de AWS CLI","text":"<p>Para realizar la instalaci\u00f3n de AWS CLI en un sistema operativo Linux sobre una arquitectura x86 de 64 bits, tenemos que ejecutar los siguientes comandos.</p> <p>Paso 1. Descargamos un archivo <code>.zip</code> con la aplicaci\u00f3n AWS CLI.</p> <pre><code>curl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"awscliv2.zip\"\n</code></pre> <p>Paso 2. Descomprimimos el archivo que acabamos de descargar.</p> <pre><code>unzip awscliv2.zip\n</code></pre> <p>Paso 3. Ejectuamos el script de instalaci\u00f3n.</p> <pre><code>sudo ./aws/install\n</code></pre> <p>Paso 4. Comprobamos que la instalaci\u00f3n se ha realizado de forma correcta.</p> <pre><code>aws --version\n</code></pre>"},{"location":"4-3/#configuracion-de-aws-cli","title":"Configuraci\u00f3n de AWS CLI","text":"<p>Para configurar AWS CLI ejecutaremos el siguiente comando.</p> <pre><code>aws configure\n</code></pre> <p>Este comandos nos preguntar\u00e1 estos datos:</p> <pre><code>AWS Access Key ID [None]: \nAWS Secret Access Key [None]: \nDefault region name [None]: \nDefault output format [None]:\n</code></pre> <p>Y crear\u00e1 un archivo de texto llamado credentials dentro del directorio home del usuario.</p> <ul> <li>En Linux/macOs el archivo estar\u00e1 en la ruta: <code>~/.aws/credentials</code>.</li> <li>En Windows estar\u00e1 en la ruta: <code>C:\\Users\\usuario\\.aws\\credentials</code>.</li> </ul>"},{"location":"4-3/#creacion-y-configuracion-de-grupos-de-seguridad","title":"Creaci\u00f3n y configuracion de grupos de seguridad","text":"<p>Importamos el archivo <code>aws_resource_functions</code> y lo renombramos como <code>aws</code></p> <pre><code>from common import aws_resource_functions as aws\n</code></pre>"},{"location":"4-3/#creamos-el-grupo-de-seguridad-frontend-sg","title":"Creamos el grupo de seguridad: frontend-sg","text":"<p>Definimos las reglas del grupo de seguridad y las almacenamos en una variable.</p> <pre><code>regla_front = [\n    {'CidrIp': '0.0.0.0/0', 'IpProtocol': 'tcp', 'FromPort': 22, 'ToPort': 22},\n    {'CidrIp': '0.0.0.0/0', 'IpProtocol': 'tcp', 'FromPort': 2049, 'ToPort': 2049}]\n</code></pre> <p>Definimos el nombre del grupo de seguridad y una descripci\u00f3n y lo almacenamos en una variable.</p> <pre><code>sg_front_name = \"frontend-sg\"\nsg_front_descrip = \"Grupo de seguridad para el frontend\"\n</code></pre> <p>Ejecutamos el siguiente comando para crear el grupo de seguridad.</p> <pre><code>aws.create_security_group(sg_front_name, sg_front_descrip, regla_front)\n</code></pre>"},{"location":"4-3/#creamos-el-grupo-de-seguridad-backend-sg","title":"Creamos el grupo de seguridad: backend-sg","text":"<p>Definimos las reglas del grupo de seguridad y las almacenamos en una variable.</p> <pre><code>regla_backend = [\n    {'CidrIp': '0.0.0.0/0', 'IpProtocol': 'tcp', 'FromPort': 22, 'ToPort': 22},\n    {'CidrIp': '0.0.0.0/0', 'IpProtocol': 'tcp', 'FromPort': 3306, 'ToPort': 3306}]\n</code></pre> <p>Definimos el nombre del grupo de seguridad y una descripci\u00f3n y lo almacenamos en una variable.</p> <pre><code>sg_backend_name = \"backend-sg\"\nsg_backend_descrip = \"Grupo de seguridad para el backend\"\n</code></pre> <p>Ejecutamos el siguiente comando para crear el grupo de seguridad.</p> <pre><code>aws.create_security_group(sg_backend_name, sg_backend_descrip, regla_backend)\n</code></pre>"},{"location":"4-3/#creamos-el-grupo-de-seguridad-nfs-sg","title":"Creamos el grupo de seguridad: NFS-sg","text":"<p>Definimos las reglas del grupo de seguridad y las almacenamos en una variable.</p> <pre><code>regla_nfs = [\n    {'CidrIp': '0.0.0.0/0', 'IpProtocol': 'tcp', 'FromPort': 22, 'ToPort': 22},\n    {'CidrIp': '0.0.0.0/0', 'IpProtocol': 'tcp', 'FromPort': 2049, 'ToPort': 2049}]\n</code></pre> <p>Definimos el nombre del grupo de seguridad y una descripci\u00f3n y lo almacenamos en una variable.</p> <pre><code>sg_nfs_name = \"NFS-sg\"\nsg_nfs_descrip = \"Grupo de seguridad para el NFS server\"\n</code></pre> <p>Ejecutamos el siguiente comando para crear el grupo de seguridad.</p> <pre><code>aws.create_security_group(sg_nfs_name, sg_nfs_descrip, regla_nfs)\n</code></pre>"},{"location":"4-3/#creamos-el-grupo-de-seguridad-loadbalancer-sg","title":"Creamos el grupo de seguridad: loadbalancer-sg","text":"<p>Definimos las reglas del grupo de seguridad y las almacenamos en una variable.</p> <pre><code>regla_loadbalancer = [\n    {'CidrIp': '0.0.0.0/0', 'IpProtocol': 'tcp', 'FromPort': 22, 'ToPort': 22},\n    {'CidrIp': '0.0.0.0/0', 'IpProtocol': 'tcp', 'FromPort': 80, 'ToPort': 80},\n    {'CidrIp': '0.0.0.0/0', 'IpProtocol': 'tcp', 'FromPort': 443, 'ToPort': 443}]\n</code></pre> <p>Definimos el nombre del grupo de seguridad y una descripci\u00f3n y lo almacenamos en una variable.</p> <pre><code>sg_load_name = \"loadbalancer-sg\"\nsg_load_descrip = \"Grupo de seguridad para el balanceador de carga\"\n</code></pre> <p>Ejecutamos el siguiente comando para crear el grupo de seguridad.</p> <pre><code>aws.create_security_group(sg_load_name, sg_load_descrip, regla_loadbalancer)\n</code></pre>"},{"location":"4-3/#creacion-y-configuracion-de-las-instancias-de-aws","title":"Creaci\u00f3n y configuracion de las instancias de AWS","text":"<p>Definimos las variables que necesitaremos a la hora de crear la instancias. </p> <pre><code>ami = 'ami-04b4f1a9cf54c11d0'\ninstance_type = 't2.small'\nkey_name = 'vockey'\n</code></pre>"},{"location":"4-3/#creamos-una-intancia-ec2-para-el-frontend","title":"Creamos una intancia EC2 para el frontend","text":"<p>Definimos el nombre que tendra la instancia y la almacenamos en una variable.</p> <pre><code>inst_name_front = 'frontend'\n</code></pre> <p>Comprobamos que el grupo de seguridad existe para que no haya conflicto.</p> <pre><code>if aws.security_group_exists(sg_front_name) == False:\n    print('The security group does not exist')\n    exit()\n</code></pre> <p>Ejecutamos el siguiente comando para crear la instancia.</p> <pre><code>aws.create_instance(ami, 1, instance_type, key_name, inst_name_front, sg_front_name)\n</code></pre>"},{"location":"4-3/#creamos-una-intancia-ec2-para-el-frontend_2","title":"Creamos una intancia EC2 para el frontend_2","text":"<p>Definimos el nombre que tendra la instancia y la almacenamos en una variable.</p> <pre><code>inst_name_front2 = 'frontend_2'\n</code></pre> <p>Comprobamos que el grupo de seguridad existe para que no haya conflicto.</p> <pre><code>if aws.security_group_exists(sg_front_name) == False:\n    print('The security group does not exist')\n    exit()\n</code></pre> <p>Ejecutamos el siguiente comando para crear la instancia.</p> <pre><code>aws.create_instance(ami, 1, instance_type, key_name, inst_name_front2, sg_front_name)\n</code></pre>"},{"location":"4-3/#creamos-una-intancia-ec2-para-el-backend","title":"Creamos una intancia EC2 para el backend","text":"<p>Definimos el nombre que tendra la instancia y la almacenamos en una variable.</p> <pre><code>inst_name_backend = 'backend'\n</code></pre> <p>Comprobamos que el grupo de seguridad existe para que no haya conflicto.</p> <pre><code>if aws.security_group_exists(sg_backend_name) == False:\n    print('The security group does not exist')\n    exit()\n</code></pre> <p>Ejecutamos el siguiente comando para crear la instancia.</p> <pre><code>aws.create_instance(ami, 1, instance_type, key_name, inst_name_backend, sg_backend_name)\n</code></pre>"},{"location":"4-3/#creamos-una-intancia-ec2-para-el-nfs","title":"Creamos una intancia EC2 para el NFS","text":"<p>Definimos el nombre que tendra la instancia y la almacenamos en una variable.</p> <pre><code>inst_name_NFS = 'NFS_server'\n</code></pre> <p>Comprobamos que el grupo de seguridad existe para que no haya conflicto.</p> <pre><code>if aws.security_group_exists(sg_nfs_name) == False:\n    print('The security group does not exist')\n    exit()\n</code></pre> <p>Ejecutamos el siguiente comando para crear la instancia.</p> <pre><code>aws.create_instance(ami, 1, instance_type, key_name, inst_name_NFS, sg_nfs_name)\n</code></pre>"},{"location":"4-3/#creamos-una-intancia-ec2-para-el-loadbalancer","title":"Creamos una intancia EC2 para el loadbalancer","text":"<p>Definimos el nombre que tendra la instancia y la almacenamos en una variable.</p> <pre><code>inst_name_load = 'loadbalancer'\n</code></pre> <p>Comprobamos que el grupo de seguridad existe para que no haya conflicto.</p> <pre><code>if aws.security_group_exists(sg_load_name) == False:\n    print('The security group does not exist')\n    exit()\n</code></pre> <p>Ejecutamos el siguiente comando para crear la instancia.</p> <pre><code>aws.create_instance(ami, 1, instance_type, key_name, inst_name_load, sg_load_name)\n</code></pre>"},{"location":"4-3/#comprobacion-de-la-creacion","title":"Comprobaci\u00f3n de la creaci\u00f3n","text":"<p>Comprobamos que los grupos de seguridad se crearon correctamente en consola.</p> <p></p> <p>Comprobamos que los grupos de seguridad se crearon correctamente en en <code>AWS</code>.</p> <p></p> <p>Comprobamos que las instancias se crearon correctamente en consola.</p> <p></p> <p>Comprobamos que las instancia se crearon correctamente en AWS.</p> <p></p>"},{"location":"4-5/","title":"Practica IAW 4.5","text":""},{"location":"4-5/#implantacion-de-wordpress-en-aws-utilizando-terraform","title":"Implantaci\u00f3n de Wordpress en AWS utilizando Terraform","text":"<p>En esta practica vamos a realizar la creacion de la estructura de la <code>Practica 1.11 - Implantaci\u00f3n de Wordpress en AWS utilizando una arquitectura de tres niveles</code> a traves de una plataforma de computacion en la nube mediante Terraform.</p>"},{"location":"4-5/#que-es-terraform","title":"\u00bfQu\u00e9 es Terraform?","text":"<p>Terraform es una herramienta de infraestructura como c\u00f3digo (Infraestructure as Code, IaC) que permite crear, modificar y eliminar infraestructura de forma autom\u00e1tica.</p> <p>Terraform puede gestionar los recursos de diferentes proveedores de servicios en la nube, como AWS, Google Cloud, Azure, etc.</p>"},{"location":"4-5/#infraestructura-necesaria","title":"Infraestructura necesaria","text":"<p>La infraestructura propuesta consta de cinco m\u00e1quinas virtuales, un balanceador de carga, una capa front-end formada por dos servidores web y un servidor NFS y una ultima capa back-end formada por un servidor, cada capa de la infraestrutura tendra su respectivo grupo de seguridad con reglas personalizadas.</p> <p>Necesitaremos crear las siguientes m\u00e1quinas virtuales y reglas:</p> <ul> <li> <p>Balanceador: Acceso por SSH (puerto 22), HTTP (puerto 80) y HTTPS (puerto 443).</p> </li> <li> <p>Frontal Web 1: Acceso por SSH (puerto 22) y NFS (puerto 2049).</p> </li> <li> <p>Frontal Web 2: Acceso por SSH (puerto 22) y NFS (puerto 2049).</p> </li> <li> <p>Servidor NFS: NFS: Acceso por SSH (puerto 22) y NFS (puerto 2049).</p> </li> <li> <p>Servidor de Base de Datos: Acceso por SSH (puerto 22) y MySQL (puerto 3306).</p> </li> </ul>"},{"location":"4-5/#contenido-del-archivo-de-las-variables","title":"Contenido del archivo de las variables","text":""},{"location":"4-5/#creacion-de-las-variables-necesarias-para-la-instancia","title":"Creaci\u00f3n de las variables necesarias para la instancia","text":"<pre><code>variable \"ami_id\" {\n  description = \"Identificador de la AMI\"\n  type        = string\n  default     = \"ami-00874d747dde814fa\"\n}\n\nvariable \"instance_type\" {\n  description = \"Tipo de instancia\"\n  type        = string\n  default     = \"t2.small\"\n}\n\nvariable \"key_name\" {\n  description = \"Nombre de la clave p\u00fablica\"\n  type        = string\n  default     = \"vockey\"\n}\n\nvariable \"region\" {\n  description = \"Regi\u00f3n de AWS donde se crear\u00e1 la instancia\"\n  type        = string\n  default     = \"us-east-1\"\n}\n</code></pre>"},{"location":"4-5/#creacion-de-las-variables-necesarias-para-el-grupo-de-seguridad-del-frontend","title":"Creaci\u00f3n de las variables necesarias para el grupo de seguridad del frontend","text":"<pre><code>variable \"sg_frontend\" {\n  description = \"Nombre del grupo de seguridad del frontend\"\n  type        = string\n  default     = \"frontend-sg\"\n}\n\nvariable \"frontend\" {\n  description = \"Puertos de entrada del grupo de seguridad del frontend\"\n  type        = list(number)\n  default     = [22, 2049]\n}\n\nvariable \"sg_des_front\" {\n  description = \"Descripci\u00f3n del grupo de seguridad del frontend\"\n  type        = string\n  default     = \"Grupo de seguridad para las instancia de frontend\"\n}\n</code></pre>"},{"location":"4-5/#creamos-las-variables-necesarias-para-la-creacion-de-la-instancias","title":"Creamos las variables necesarias para la creaci\u00f3n de la instancias.","text":"<pre><code>variable \"instance_frontend\" {\n  description = \"Nombre de la instancia del frontend\"\n  type        = string\n  default     = \"frontend_1\"\n}\n\nvariable \"instance_frontend_2\" {\n  description = \"Nombre de la instancia del frontend\"\n  type        = string\n  default     = \"frontend_2\"\n}\n</code></pre>"},{"location":"4-5/#creacion-de-las-variables-necesarias-para-el-grupo-de-seguridad-del-loadbalancer","title":"Creaci\u00f3n de las variables necesarias para el grupo de seguridad del loadbalancer","text":"<pre><code>variable \"sg_loadbalancer\" {\n  description = \"Nombre del grupo de seguridad del loadbalancer\"\n  type        = string\n  default     = \"loadbalancer-sg\"\n}\n\nvariable \"loadbalancer\" {\n  description = \"Puertos de entrada del grupo de seguridad del loadbalancer\"\n  type        = list(number)\n  default     = [22, 80, 443]\n}\n\nvariable \"sg_des_load\" {\n  description = \"Descripci\u00f3n del grupo de seguridad del loadbalancer\"\n  type        = string\n  default     = \"Grupo de seguridad para la instancia de loadbalancer\"\n}\n</code></pre>"},{"location":"4-5/#creamos-la-variable-necesaria-para-la-creacion-de-la-instancia","title":"Creamos la variable necesaria para la creaci\u00f3n de la instancia","text":"<pre><code>variable \"instance_loadbalancer\" {\n  description = \"Nombre de la instancia del loadbalancer\"\n  type        = string\n  default     = \"loadbalancer\"\n}\n</code></pre>"},{"location":"4-5/#creacion-las-variables-necesarias-para-el-grupo-de-seguridad-del-backend","title":"Creaci\u00f3n las variables necesarias para el grupo de seguridad del backend","text":"<pre><code>variable \"sg_backend\" {\n  description = \"Nombre del grupo de seguridad del backend\"\n  type        = string\n  default     = \"backend-sg\"\n}\n\nvariable \"backend\" {\n  description = \"Puertos de entrada del grupo de seguridad del backend\"\n  type        = list(number)\n  default     = [22, 3306]\n}\n\nvariable \"sg_des_back\" {\n  description = \"Descripci\u00f3n del grupo de seguridad del backend\"\n  type        = string\n  default     = \"Grupo de seguridad para la instancia de backend\"\n}\n</code></pre>"},{"location":"4-5/#creamos-la-variable-necesaria-para-la-creacion-de-la-instancia_1","title":"Creamos la variable necesaria para la creaci\u00f3n de la instancia","text":"<pre><code>variable \"instance_backend\" {\n  description = \"Nombre de la instancia del backend\"\n  type        = string\n  default     = \"backend\"\n}\n</code></pre>"},{"location":"4-5/#creacion-las-variables-necesarias-para-el-grupo-de-seguridad-del-nfs-server","title":"Creaci\u00f3n las variables necesarias para el grupo de seguridad del NFS-Server","text":"<pre><code>variable \"sg_nfs\" {\n  description = \"Nombre del grupo de seguridad del NFS-server\"\n  type        = string\n  default     = \"NFS-sg\"\n}\n\nvariable \"nfs\" {\n  description = \"Puertos de entrada del grupo de seguridad del nfs\"\n  type        = list(number)\n  default     = [22, 2049]\n}\n\nvariable \"sg_des_nfs\" {\n  description = \"Descripci\u00f3n del grupo de seguridad del NFS\"\n  type        = string\n  default     = \"Grupo de seguridad para la instancia de NFS\"\n}\n</code></pre>"},{"location":"4-5/#creamos-la-variable-necesaria-para-la-creacion-de-la-instancia_2","title":"Creamos la variable necesaria para la creaci\u00f3n de la instancia","text":"<pre><code>variable \"instance_nfs\" {\n  description = \"Nombre de la instancia del NFS\"\n  type        = string\n  default     = \"nfs-server\"\n}\n</code></pre>"},{"location":"4-5/#creacion-y-configuracion-de-los-frontend","title":"Creaci\u00f3n y configuraci\u00f3n de los frontend","text":"<p>Creamos el grupo de seguridad del frontend.</p> <pre><code>resource \"aws_security_group\" \"frontend-sg\" {\n  name        = var.sg_frontend\n  description = var.sg_des_front\n}\n</code></pre> <p>Creamos las reglas de entrada del grupo de seguridad. Utilizamos un bucle para recorrer la lista de puertos definida como variable</p> <pre><code>resource \"aws_security_group_rule\" \"ingress_frontend\" {\n  security_group_id = aws_security_group.frontend-sg.id\n  type              = \"ingress\"\n\n  count       = length(var.frontend)\n  from_port   = var.frontend[count.index]\n  to_port     = var.frontend[count.index]\n  protocol    = \"tcp\"\n  cidr_blocks = [\"0.0.0.0/0\"]\n}\n</code></pre> <p>Creamos las reglas de salida del grupo de seguridad.</p> <pre><code>resource \"aws_security_group_rule\" \"egress_frontend\" {\n  security_group_id = aws_security_group.frontend-sg.id\n  type              = \"egress\"\n\n  from_port   = 0\n  to_port     = 0\n  protocol    = \"-1\"\n  cidr_blocks = [\"0.0.0.0/0\"]\n}\n</code></pre> <p>Creamos una instancia EC2 para el frontend 1.</p> <pre><code>resource \"aws_instance\" \"instancia_frontend\" {\n  ami             = var.ami_id\n  instance_type   = var.instance_type\n  key_name        = var.key_name\n  security_groups = [aws_security_group.frontend-sg.name]\n\n  tags = {\n    Name = var.instance_frontend\n  }\n}\n</code></pre> <p>Creamos una instancia EC2 para el frontend 2.</p> <pre><code>resource \"aws_instance\" \"instancia_frontend_2\" {\n  ami             = var.ami_id\n  instance_type   = var.instance_type\n  key_name        = var.key_name\n  security_groups = [aws_security_group.frontend-sg.name]\n\n  tags = {\n    Name = var.instance_frontend_2\n  }\n}\n</code></pre>"},{"location":"4-5/#creacion-y-configuracion-del-loadbalancer","title":"Creaci\u00f3n y configuraci\u00f3n del loadbalancer","text":"<p>Creamos el grupo de seguridad del loadbalancer</p> <pre><code>resource \"aws_security_group\" \"loadbalancer-sg\" {\n  name        = var.sg_loadbalancer\n  description = var.sg_des_load\n}\n</code></pre> <p>Creamos las reglas de entrada del grupo de seguridad del loadbalancer. Utilizamos un bucle para recorrer la lista de puertos definida como variable</p> <pre><code>resource \"aws_security_group_rule\" \"ingress_loadbalancer\" {\n  security_group_id = aws_security_group.loadbalancer-sg.id\n  type              = \"ingress\"\n\n  count       = length(var.loadbalancer)\n  from_port   = var.loadbalancer[count.index]\n  to_port     = var.loadbalancer[count.index]\n  protocol    = \"tcp\"\n  cidr_blocks = [\"0.0.0.0/0\"]\n}\n</code></pre> <p>Creamos las reglas de salida del grupo de seguridad.</p> <pre><code>resource \"aws_security_group_rule\" \"egress_loadbalancer\" {\n  security_group_id = aws_security_group.loadbalancer-sg.id\n  type              = \"egress\"\n\n  from_port   = 0\n  to_port     = 0\n  protocol    = \"-1\"\n  cidr_blocks = [\"0.0.0.0/0\"]\n}\n</code></pre> <p>Creamos una instancia EC2 para el loadbalancer.</p> <pre><code>resource \"aws_instance\" \"instancia_loadbalancer\" {\n  ami             = var.ami_id\n  instance_type   = var.instance_type\n  key_name        = var.key_name\n  security_groups = [aws_security_group.loadbalancer-sg.name]\n\n  tags = {\n    Name = var.instance_loadbalancer\n  }\n}\n</code></pre> <p>Creamos una IP el\u00e1stica y la asociamos a la instancia</p> <pre><code>resource \"aws_eip\" \"ip_elastica\" {\n  instance = aws_instance.instancia_loadbalancer.id\n}\n</code></pre>"},{"location":"4-5/#creacion-y-configuracion-del-backend","title":"Creaci\u00f3n y configuraci\u00f3n del backend","text":"<p>Creamos el grupo de seguridad del backend</p> <pre><code>resource \"aws_security_group\" \"backend-sg\" {\n  name        = var.sg_backend\n  description = var.sg_des_back\n}\n</code></pre> <p>Creamos las reglas de entrada del grupo de seguridad del backend. Utilizamos un bucle para recorrer la lista de puertos definida como variable</p> <pre><code>resource \"aws_security_group_rule\" \"ingress_backend\" {\n  security_group_id = aws_security_group.backend-sg.id\n  type              = \"ingress\"\n\n  count       = length(var.backend)\n  from_port   = var.backend[count.index]\n  to_port     = var.backend[count.index]\n  protocol    = \"tcp\"\n  cidr_blocks = [\"0.0.0.0/0\"]\n}\n</code></pre> <p>Creamos las reglas de salida del grupo de seguridad.</p> <pre><code>resource \"aws_security_group_rule\" \"egress_backend\" {\n  security_group_id = aws_security_group.backend-sg.id\n  type              = \"egress\"\n\n  from_port   = 0\n  to_port     = 0\n  protocol    = \"-1\"\n  cidr_blocks = [\"0.0.0.0/0\"]\n}\n</code></pre> <p>Creamos una instancia EC2 para el backend</p> <pre><code>resource \"aws_instance\" \"instancia_backend\" {\n  ami             = var.ami_id\n  instance_type   = var.instance_type\n  key_name        = var.key_name\n  security_groups = [aws_security_group.backend-sg.name]\n\n  tags = {\n    Name = var.instance_backend\n  }\n}\n</code></pre>"},{"location":"4-5/#creacion-y-configuracion-del-nfs-server","title":"Creaci\u00f3n y configuraci\u00f3n del NFS-Server","text":"<p>Creamos el grupo de seguridad del NFS</p> <pre><code>resource \"aws_security_group\" \"NFS-sg\" {\n  name        = var.sg_nfs\n  description = var.sg_des_nfs\n}\n</code></pre> <p>Creamos las reglas de entrada del grupo de seguridad del NFS. Utilizamos un bucle para recorrer la lista de puertos definida como variable</p> <pre><code>resource \"aws_security_group_rule\" \"ingress_nfs\" {\n  security_group_id = aws_security_group.NFS-sg.id\n  type              = \"ingress\"\n\n  count       = length(var.nfs)\n  from_port   = var.nfs[count.index]\n  to_port     = var.nfs[count.index]\n  protocol    = \"tcp\"\n  cidr_blocks = [\"0.0.0.0/0\"]\n}\n</code></pre> <p>Creamos las reglas de salida del grupo de seguridad.</p> <pre><code>resource \"aws_security_group_rule\" \"egress_nfs\" {\n  security_group_id = aws_security_group.NFS-sg.id\n  type              = \"egress\"\n\n  from_port   = 0\n  to_port     = 0\n  protocol    = \"-1\"\n  cidr_blocks = [\"0.0.0.0/0\"]\n}\n</code></pre> <p>Creamos una instancia EC2 para el nfs</p> <pre><code>resource \"aws_instance\" \"instancia_nfs_server\" {\n  ami             = var.ami_id\n  instance_type   = var.instance_type\n  key_name        = var.key_name\n  security_groups = [aws_security_group.NFS-sg.name]\n\n  tags = {\n    Name = var.instance_nfs\n  }\n}\n</code></pre>"},{"location":"4-5/#comprobaciones-del-funcionamiento","title":"Comprobaciones del funcionamiento","text":"<p>Comprobamos que se ejecuta correctamente</p> <p></p> <p>Comprobamos que se han creado correctamento los grupos en AWS.</p> <p></p> <p>Comprobamos que se han creado correctamento las instancias en AWS.</p> <p></p>"},{"location":"5-1/","title":"Practica iaw 5.1","text":""},{"location":"5-1/#https-con-lets-encrypt-docker-y-docker-compose","title":"HTTPS con Let\u2019s Encrypt, Docker y Docker Compose","text":"<p>En esta pr\u00e1ctica vamos a habilitar el protocolo HTTPS en un sitio web PrestaShop que se estar\u00e1 ejecutando sobre contenedores Docker en una instancia EC2 de Amazon Web Services (AWS).</p>"},{"location":"5-1/#que-es-https","title":"\u00bfQu\u00e9 es HTTPS?","text":"<p>HTTPS (Hyptertext Transfer Protocol Secure) o protocolo seguro de transferencia de hipertexto, es un protocolo de la capa de aplicaci\u00f3n basado en el protocolo HTTP, destinado a la transferencia segura de datos de hipertexto.</p> <p>Para poder habilitar el protocolo HTTPS en un sitio web es necesario obtener un certificado de seguridad. Este certificado tiene que ser emitido por una autoridad de certificaci\u00f3n (AC). En esta pr\u00e1ctica vamos a obtener un certificado para un dominio de la Autoriidad de Certificaci\u00f3n Let\u2019s Encrypt\u200b.</p>"},{"location":"5-1/#que-es-lets-encrypt","title":"\u00bfQu\u00e9 es Let\u2019s Encrypt?","text":"<p>Let\u2019s Encrypt\u200b es una autoridad de certificaci\u00f3n que se puso en marcha el 12 de abril de 2016 y que proporciona certificados X.509 gratuitos para el cifrado de seguridad de nivel de transporte (TLS) a trav\u00e9s de un proceso automatizado dise\u00f1ado para eliminar el complejo proceso actual de creaci\u00f3n manual, la validaci\u00f3n, firma, instalaci\u00f3n y renovaci\u00f3n de los certificados de sitios web seguros.</p>"},{"location":"5-1/#que-es-el-protocolo-acme","title":"\u00bfQu\u00e9 es el protocolo ACME?","text":"<p>Para poder obtener un certificado de Let\u2019s Encrypt\u200b para un dominio de un sitio web es necesario demostrar que se tiene control sobre ese dominio. Para realizar esta tarea es necesario utilizar un cliente del protocolo ACME (Automated Certificate Management Environment).</p>"},{"location":"5-1/#que-es-https-portal","title":"\u00bfQu\u00e9 es HTTPS-PORTAL?","text":"<p>HTTPS-PORTAL es una imagen Docker que contiene un servidor HTTPS totalmente automatizado que hace uso de las tecnolog\u00edas Nginx y Let\u2019s Encrypt. Los certificados SSL se obtienen y renuevan de Let\u2019s Encrypt autom\u00e1ticamente.</p> <p>Esta imagen est\u00e1 preparada para permitir que cualquier aplicaci\u00f3n web pueda ejecutarse a trav\u00e9s de HTTPS con una configuraci\u00f3n muy sencilla.</p> <p>Puede encontrar m\u00e1s informaci\u00f3n sobre HTTPS-PORTAL en la web oficial de Docker Hub.</p>"},{"location":"5-1/#contenido-del-docker-compose-yml","title":"Contenido del docker-compose-yml","text":""},{"location":"5-1/#creacion-del-contenedor-de-mysql","title":"Creaci\u00f3n del contenedor de mysql","text":"<p>Estructura del contenedor de mysql</p> <pre><code>mysql:\n    env_file:\n      - .env\n    image: mysql:9.1\n    ports: \n      - 3306:3306\n    environment: \n      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}\n      - MYSQL_DATABASE=${MYSQL_DATABASE}\n      - MYSQL_USER=${MYSQL_USER}\n      - MYSQL_PASSWORD=${MYSQL_PASSWORD}\n    volumes: \n      - mysql_data:/var/lib/mysql\n    networks: \n      - backend-network\n    restart: always\n</code></pre>"},{"location":"5-1/#creacion-del-contenedor-de-phpmyadmin","title":"Creaci\u00f3n del contenedor de phpMyAdmin","text":"<p>Estructura del contenedor de phpMyAdmin</p> <pre><code>  phpmyadmin:\n    image: phpmyadmin:5.2.1\n    ports:\n      - 8080:80\n    environment: \n      - PMA_ARBITRARY=1\n    networks: \n      - backend-network\n      - frontend-network\n    restart: always\n    depends_on: \n      - mysql\n</code></pre>"},{"location":"5-1/#creacion-del-contenedor-de-prestashop","title":"Creaci\u00f3n del contenedor de Prestashop","text":"<p>Estructura del contenedor de Prestashop</p> <pre><code>  prestashop:\n    image: prestashop/prestashop:8\n    environment: \n      - DB_SERVER=mysql\n    volumes:\n      - prestashop_data:/var/www/html\n    networks: \n      - backend-network\n      - frontend-network\n    restart: always\n    depends_on: \n      - mysql\n</code></pre>"},{"location":"5-1/#creacion-del-contenedor-de-https-portal","title":"Creaci\u00f3n del contenedor de https-portal","text":"<p>Estructura del contenedor de https-portal</p> <pre><code>  https-portal:\n    image: steveltn/https-portal:1\n    ports:\n      - 80:80\n      - 443:443\n    restart: always\n    environment:\n      DOMAINS: \"${DOMAIN} -&gt; http://prestashop:80\"\n      STAGE: 'production' # Don't use production until staging works\n      # FORCE_RENEW: 'true'\n    networks:\n      - frontend-network\n</code></pre>"},{"location":"5-1/#comprobaciones-del-funcionamiento","title":"Comprobaciones del funcionamiento","text":"<p>Comprobamos que se ejecuta correctamente <code>docker-compose.yml</code>.</p> <p></p> <p>Comprobamos que la p\u00e1gina de prestashop funciona correctamente.</p> <p></p> <p>Comprobamos que la p\u00e1gina de prestashop se conecta a la base de datos.</p> <p></p> <p>Comprobamos que tenemos acceso a panel de administrador de Prestashop.</p> <p></p> <p>Comprobamos el certificado de la p\u00e1gina web.</p> <p></p>"},{"location":"5-2/","title":"Practica iaw 5.2","text":""},{"location":"5-2/#despliegue-de-wordpress-usando-contenedores-docker-y-docker-compose","title":"Despliegue de WordPress usando contenedores Docker y Docker Compose","text":"<p>En esta pr\u00e1ctica tendremos que realizar la implantaci\u00f3n de un sitio WordPress en Amazon Web Services (AWS) haciendo uso de contenedores Docker y la herramienta Docker Compose.</p>"},{"location":"5-2/#contenido-del-docker-compose-yml","title":"Contenido del docker-compose-yml","text":"<p>Estructura del contenedor de mysql.</p> <pre><code>mysql:\n    env_file:\n      - .env\n    image: mysql:8.0\n    environment:\n      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}\n      - MYSQL_DATABASE=${WORDPRESS_DB_NAME}\n      - MYSQL_USER=${WORDPRESS_DB_USER}\n      - MYSQL_PASSWORD=${WORDPRESS_DB_PASSWORD}\n    volumes:\n      - mysql_data:/var/lib/mysql\n    networks:\n        - backend-network\n    restart: always\n    healthcheck:\n      test: [\"CMD\", \"mysqladmin\", \"ping\", \"-h\", \"localhost\"]\n      interval: 10s\n      timeout: 5s\n      retries: 3  \n</code></pre> <p>Estructura del contenedor de phpmyadmin.</p> <pre><code>  phpmyadmin:\n    image: phpmyadmin\n    ports:\n      - 8080:80\n    environment: \n      - PMA_ARBITRARY=1\n    networks:\n      - backend-network\n    restart: always\n</code></pre> <p>Estructura del contenedor de wordpress.</p> <p><code>wordpress:     env_file:       - .env     image: bitnami/wordpress:latest     environment:       - DB_SERVER=mysql       - WORDPRESS_DATABASE_USER=${WORDPRESS_DB_USER}       - WORDPRESS_DATABASE_NAME=${WORDPRESS_DB_NAME}       - WORDPRESS_DATABASE_PASSWORD=${WORDPRESS_DB_PASSWORD}       - WORDPRESS_DATABASE_HOST=mysql       - WORDPRESS_DATABASE_PORT_NUMBER=3306     volumes:       - wordpress:/var/www/html     networks:       - backend-network       - frontend-network     restart: always     depends_on:       - mysql</code></p> <p>Estructura del contenedor de https-portal.</p> <pre><code>  https-portal:\n    image: steveltn/https-portal:1\n    ports:\n      - 80:80\n      - 443:443\n    restart: always\n    environment:\n      DOMAINS: \"${DOMAIN} -&gt; http://wordpress:8080\"\n      stage: 'production'\n    networks:\n      - frontend-network\n</code></pre>"},{"location":"5-2/#comprobaciones-del-funcionamiento","title":"Comprobaciones del funcionamiento","text":"<p>Comprobamos que se ejecuta correctamente <code>docker-compose.yml</code>.</p> <p></p> <p>Comprobamos el estado de los contenedores.</p> <p> Comprobamos que la p\u00e1gina de Wordpress funciona correctamente.</p> <p></p> <p>Comprobamos que tenemos acceso a panel de administrador de Prestashop.</p> <p></p> <p>Comprobamos el certificado de la p\u00e1gina web.</p> <p></p> <p>Comprobamos que la p\u00e1gina de phpMyAdmin funciona correctamente.</p> <p></p>"},{"location":"5-4/","title":"Pr\u00e1ctica IAW 5.4","text":""},{"location":"5-4/#dockerizar-una-web-estatica-y-publicarla-en-docker-hub","title":"\u00abDockerizar\u00bb una web est\u00e1tica y publicarla en Docker Hub","text":"<p>En esta pr\u00e1ctica tendremos que crear un archivo Dockerfile para crear una imagen Docker que contenga una aplicaci\u00f3n web est\u00e1tica. Posteriormente deber\u00e1 publicar la imagen en Docker Hub y realizar la implantaci\u00f3n del sitio web en Amazon Web Services (AWS) haciendo uso de contenedores Docker y de la herramienta Docker Compose.</p>"},{"location":"5-4/#contenido-del-dockerfile","title":"Contenido del dockerfile","text":"<p>Se ha desarrollado un archivo <code>Dockerfile</code> que cumple con los requisitos establecidos para el despliegue de la aplicaci\u00f3n web est\u00e1tica en un contenedor Docker.</p> <pre><code>FROM ubuntu:24.04\n\nRUN apt update &amp;&amp; \\\n    apt install nginx -y &amp;&amp; \\\n    apt install git -y &amp;&amp; \\\n    rm -rf /var/lib/apt/lists/*\n\nRUN git clone https://github.com/josejuansanchez/2048.git /app &amp;&amp; \\\n    mv /app/* /var/www/html/\n\nCMD [ \"nginx\", \"-g\", \"daemon off;\" ]\n\nLABEL AUTHOR=\"Romel\"\nLABEL DESCRIPTION=\"Imagen de ejemplo\"\n</code></pre>"},{"location":"5-4/#creacion-de-la-imagen-docker-a-partir-del-archivo-dockerfile","title":"Creaci\u00f3n de la imagen Docker a partir del archivo Dockerfile","text":"<p>Para crear la imagen de Docker a partir del archivo Dockerfile deber\u00e1 ejecutar el siguiente comando.</p> <pre><code>docker build -t roch147/2048 .\n</code></pre> <p>Para comprobar que la imagen se ha creado correctamente podemos ejecutar el comando:</p> <pre><code>docker images\n</code></pre> <p>Asignamos una etiqueta a la imagen.</p> <pre><code>docker tag roch147/2048 roch147/2048:1.0\n</code></pre>"},{"location":"5-4/#comprobaciones-del-funcionamiento","title":"Comprobaciones del funcionamiento.","text":"<p>Comprobaci\u00f3n de que el comando se ejecuta correctamente.</p> <p></p> <p>Comprobaci\u00f3n de que se crea correctamente la imagen.</p> <p></p> <p>Comprobaci\u00f3n de que se asigna una etiqueta correctamente.</p> <p></p>"},{"location":"5-4/#publicar-la-imagen-en-docker-hub","title":"Publicar la imagen en Docker Hub","text":"<p>Tendremos que iniciar sesi\u00f3n en Docker Hub con el comando.</p> <pre><code>docker login -u roch147\n</code></pre> <p>Una vez que hayamos iniciado sesion podemos publicar la imagen con el comando docker push.</p> <pre><code>docker push roch147/2048\n</code></pre>"},{"location":"5-4/#comprobaciones-del-funcionamiento_1","title":"Comprobaciones del funcionamiento.","text":"<p>Comprobaci\u00f3n de que nos podemos logear correctamente.</p> <p></p> <p>Comprobaci\u00f3n de que podemos publicar la imagen.</p> <p></p>"},{"location":"5-4/#publicar-la-imagen-automaticamente-en-docker-hub-con-github-actions","title":"Publicar la imagen autom\u00e1ticamente en Docker Hub con GitHub Actions","text":"<p>En este apartado vamos a aprender c\u00f3mo podemos configurar GitHub Actions para publicar una imagen autom\u00e1ticamente en un Registry como Docker Hub, cada vez que se realice un push al repositorio de GitHub.</p> <p>Podemos encontrar un ejemplo de c\u00f3mo se puede configurar GitHub Actions para publicar una imagen de Docker en el siguiente repositorio de GitHub:</p> <ul> <li>https://github.com/josejuansanchez/2048-github-actions</li> </ul> <p>Se deber\u00e1 crear dos secrets en el repositorio para las acciones de GitHub Actions. Estos secrets almacenar\u00e1n los siguientes valores:</p> <ul> <li><code>DOCKERHUB_USERNAME</code>: Nombre de usuario en Docker Hub.</li> <li><code>DOCKERHUB_TOKEN</code>: Token de acceso a Docker Hub, que tendr\u00e1 que crear en la secci\u00f3n de Security de su cuenta de Docker Hub.</li> </ul>"},{"location":"5-4/#comprobaciones","title":"Comprobaciones","text":"<p>Comprobaci\u00f3n de las varibales creadas.</p> <p></p> <p>Comprobaci\u00f3n de que funciona correctamente.</p> <p></p> <p>Comprobaci\u00f3n de que se public\u00f3 en docker hub.</p> <p></p> <p>Comprobaci\u00f3n de las versiones que se han publicado en docker hub.</p> <p></p> <p>Comprobaci\u00f3n de que se puede ejecutar correctamente.</p> <p></p> <p>Comprobaci\u00f3n de que la p\u00e1gina web funciona correctamente.</p> <p></p>"}]}